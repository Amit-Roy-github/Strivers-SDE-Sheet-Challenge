class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        // vector<vector<int>>dp(n,vector<int>(m,0));
        vector<int>prev(m,0);
        // return solve(grid,0,0,dp);

        for(int i=0;i<n;i++)
        {
            vector<int>curr(m,0);
            for(int j=0;j<m;j++)
            {
                if(i==0 && j==0)
                {
                    curr[0]=grid[0][0];
                }
                else
                {
                    int up=grid[i][j];
                    if(i>0)
                    {
                        up+=prev[j];
                    }
                    else
                    {
                        up+=1e9;
                    }
                    int left=grid[i][j];
                    if(j>0)
                    {
                        left+=curr[j-1];
                    }
                    else
                    left+=1e9;

                    curr[j]=min(up,left);
                }
            }
            prev=curr;
        }
        return prev[m-1];
    }
     
     
     //// recurdion and memorization
    // int solve(vector<vector<int>>& nums,int i,int j,vector<vector<int>>&dp)
    // {
    //      if(i==nums.size()-1 && j==nums[0].size()-1)
    //      {
    //          return nums[i][j];
    //      }
    //      if(i>=nums.size() || j>=nums[0].size())
    //      return INT_MAX;

    //      if(dp[i][j]!=-1)
    //      return dp[i][j];

    //     return dp[i][j]=min(solve(nums,i+1, j,dp),solve(nums,i,j+1,dp))+nums[i][j];

    // }
     
};
