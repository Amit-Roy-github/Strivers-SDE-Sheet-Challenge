class Solution {
public:
int sort(vector<int>&num,int i,int mid,int j)
{
   int size = j-i+1;
   vector<long long>tem(size);
    int low=i;int high=j;
    int right=mid+1,ans=0;
	for(int ii=low;ii<=mid;ii++)
	{
		while(right<=high && num[ii]>2*1LL*num[right])right++;

		ans+=right-mid-1;
	}
	 

   int k=0;
   int left=i;right=mid+1;
   while(left<=mid && right<=j)
   {
      if(num[left]>num[right])
      {
        
         tem[k++]=num[right++];
      }
      else{
         tem[k++]=num[left++];
      }
   }
   while(left<=mid)
   tem[k++]=num[left++];

   while(right<=j)
   tem[k++]=num[right++];

   k=0;
   for(;i<=j;i++)
   num[i]=tem[k++];

   return ans;
    
}
 
int merge(vector<int>&num,int i,int j)
{
	if(i>=j)
	return 0;
	int mid=(i+j)>>1;
	int ans=0;
	ans+=merge(num,i,mid);
	ans+=merge(num,mid+1,j);
	ans+= sort(num,i,mid,j);

	return ans;
}
    int reversePairs(vector<int>& nums) {
        return merge(nums,0,nums.size()-1);
    }
};
