 class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        int maxi=0;
  
        while(!q.empty())
        {
            int n=q.size();
            int i=q.front().second;
            int end=q.back().second;
            maxi=max(maxi,end-i+1);

            while(n--)
            {
                 auto node_index_pair = q.front();
                TreeNode* node = node_index_pair.first;
                int node_index = node_index_pair.second - i;
                q.pop();
                
                if (node->left != nullptr) {
                    q.push({node->left, 2LL * node_index + 1});
                }
                
                if (node->right != nullptr) {
                    q.push({node->right, 2LL * node_index + 2});
                }
            }
            
        }
        return maxi;
    }
};
