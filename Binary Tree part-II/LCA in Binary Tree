///////optimized approch    for naive see below

class Solution {
public:
    TreeNode* solve(TreeNode*root,TreeNode*a, TreeNode*b)
    {
        if(!root)return NULL;

        if(root==a)return a;
        if(root==b)return b;

        TreeNode*l=solve(root->left,a,b);
        TreeNode*r=solve(root->right,a,b);

        if(l!=NULL  && r!=NULL)
        return root;

        else
        if(l==NULL && r!=NULL)
        return r;

        else if(l!=NULL && r==NULL)
        return l;
        
        else
        return NULL;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        return solve(root,p,q);
    }
};

////naive approch 

class Solution {
public:
    bool solve(TreeNode*root,TreeNode*a,vector<TreeNode*>&tem)
    {
        if(!root)return false;
        tem.push_back(root);
        if(root==a)return true;

        if(solve(root->left,a,tem) || solve(root->right,a,tem))
        return true;
        tem.pop_back();
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*>a,b;
        solve(root,p,a);
        solve(root,q,b);
        unordered_map<TreeNode*,int>m;
        for(auto i:b)m[i]++;

        for(auto i=a.rbegin();i!=a.rend();i++)
        {
            if(m[*i])
            return *i;
        }
        return root;
