/////////using recursion    for bottom up see below;
	 
class Solution
{
    public:
    
    int solve(int i,int w,int wt[],int val[],int n,vector<vector<int>>&dp)
    {
        if(i==n)
        {
            return 0;
        }
        if(dp[i][w]!=-1)
        return dp[i][w];
        
        int nt=solve(i+1,w,wt,val,n,dp);
        int t=INT_MIN;
        if(wt[i]<=w)
        {
            t=val[i]+solve(i+1,w-wt[i],wt,val,n,dp);
        }
        return dp[i][w]=max(t,nt);
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>>dp(n+1,vector<int>(W+1,-1));
       return solve(0,W,wt,val,n,dp);
    }
};

 



bottom up approch
  
  int knapSack(int w, int wt[], int val[], int n) 
    { 
       // Your code here
      vector<int>pre(w+1,0);
      
      for(int i=wt[0];i<=w;i++)pre[i]=val[0];
      
        for(int i=1;i<n;i++ )
        {
            for(int cap=w;cap>-1;cap--)
            {
                int nt=0+pre[cap];
                int t=INT_MIN;
                if(wt[i]<=cap)
                t=val[i]+pre[cap-wt[i]];
                
                pre[cap]=max(t,nt);
            }
        }
        return pre[w];
    }
