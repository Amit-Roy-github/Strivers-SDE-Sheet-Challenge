class MedianFinder {
public:
    priority_queue<int>maxi;
    priority_queue<int,vector<int>,greater<int>>mini;
    MedianFinder() {
    }
    
    void addNum(int num) {
        if(maxi.empty() && mini.empty())
        {
            maxi.push(num);
        }
        else
        {
            if(maxi.top()<num)
            {
                mini.push(num);
            }
            else
            {
                maxi.push(num);
            }
        }
        int n=mini.size(),m=maxi.size();
        if(n-m==2)
        {
            maxi.push(mini.top());
            mini.pop();
        }
        else if(m-n==2)
        {
            mini.push(maxi.top());
            maxi.pop();
        }
    }
    
    double findMedian() {
        int n=maxi.size(),m=mini.size();
        if((m+n)%2==0)
        {
            double a=(mini.top()+maxi.top())/2.0;
            return a;
        }
        if(n>m)
        return maxi.top();
        else
        return mini.top();
    }
};
